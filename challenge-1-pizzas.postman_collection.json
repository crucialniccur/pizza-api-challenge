{
  "info": {
    "name": "Pizza Restaurant API",
    "_postman_id": "a7b9c3e2-4f5a-4c1b-8f8e-5c7f9d0e2f1c",
    "description": "Postman collection for testing the Pizza Restaurant API challenge.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Get All Restaurants",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/restaurants",
          "host": ["{{base_url}}"],
          "path": ["restaurants"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test('Response is an array', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('array');",
              "});",
              "pm.test('Each restaurant has required fields', function () {",
              "    var jsonData = pm.response.json();",
              "    jsonData.forEach(function(restaurant) {",
              "        pm.expect(restaurant).to.have.property('id');",
              "        pm.expect(restaurant).to.have.property('name');",
              "        pm.expect(restaurant).to.have.property('address');",
              "        pm.expect(restaurant).to.have.property('restaurant_pizzas').that.is.an('array');",
              "    });",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get Restaurant by ID (Valid)",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/restaurants/1",
          "host": ["{{base_url}}"],
          "path": ["restaurants", "1"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test('Response has required fields', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData).to.have.property('name');",
              "    pm.expect(jsonData).to.have.property('address');",
              "    pm.expect(jsonData).to.have.property('restaurant_pizzas').that.is.an('array');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get Restaurant by ID (Invalid)",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/restaurants/999",
          "host": ["{{base_url}}"],
          "path": ["restaurants", "999"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 404', function () {",
              "    pm.response.to.have.status(404);",
              "});",
              "pm.test('Response has error message', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('error').that.equals('Restaurant not found');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Delete Restaurant",
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{base_url}}/restaurants/2",
          "host": ["{{base_url}}"],
          "path": ["restaurants", "2"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 204', function () {",
              "    pm.response.to.have.status(204);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get All Pizzas",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/pizzas",
          "host": ["{{base_url}}"],
          "path": ["pizzas"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test('Response is an array', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('array');",
              "});",
              "pm.test('Each pizza has required fields', function () {",
              "    var jsonData = pm.response.json();",
              "    jsonData.forEach(function(pizza) {",
              "        pm.expect(pizza).to.have.property('id');",
              "        pm.expect(pizza).to.have.property('name');",
              "        pm.expect(pizza).to.have.property('ingredients');",
              "    });",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Create RestaurantPizza (Valid)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\"price\": 15.99, \"restaurant_id\": 1, \"pizza_id\": 2}"
        },
        "url": {
          "raw": "{{base_url}}/restaurant_pizzas",
          "host": ["{{base_url}}"],
          "path": ["restaurant_pizzas"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "pm.test('Response has required fields', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData).to.have.property('price');",
              "    pm.expect(jsonData).to.have.property('restaurant_id');",
              "    pm.expect(jsonData).to.have.property('pizza_id');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Create RestaurantPizza (Invalid Price)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\"price\": 50, \"restaurant_id\": 1, \"pizza_id\": 2}"
        },
        "url": {
          "raw": "{{base_url}}/restaurant_pizzas",
          "host": ["{{base_url}}"],
          "path": ["restaurant_pizzas"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 400', function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "pm.test('Response has error message', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('errors');",
              "    pm.expect(jsonData.errors).to.include('Price must be between 1 and 30');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Create RestaurantPizza (Missing Fields)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\"price\": 15.99}"
        },
        "url": {
          "raw": "{{base_url}}/restaurant_pizzas",
          "host": ["{{base_url}}"],
          "path": ["restaurant_pizzas"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 400', function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "pm.test('Response has error message', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('errors');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Create RestaurantPizza (Invalid Restaurant ID)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\"price\": 15.99, \"restaurant_id\": 999, \"pizza_id\": 2}"
        },
        "url": {
          "raw": "{{base_url}}/restaurant_pizzas",
          "host": ["{{base_url}}"],
          "path": ["restaurant_pizzas"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 404', function () {",
              "    pm.response.to.have.status(404);",
              "});",
              "pm.test('Response has error message', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('errors');",
              "    pm.expect(jsonData.errors).to.include('Restaurant not found');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:5000",
      "type": "string"
    }
  ]
}
